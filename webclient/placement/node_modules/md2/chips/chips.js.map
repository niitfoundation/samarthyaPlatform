{"version":3,"file":"chips.js","sourceRoot":"","sources":["../../../src/lib/chips/chips.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Component,\n  Input,\n  forwardRef,\n  Output,\n  ViewChild,\n  NgModule,\n  ElementRef,\n  ModuleWithProviders,\n  EventEmitter,\n  AfterContentInit,\n  HostListener,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  NG_VALUE_ACCESSOR,\n  NgForm,\n  FormsModule\n} from '@angular/forms';\n\nimport { CommonModule } from '@angular/common';\nimport { Md2AutocompleteModule } from '../autocomplete/autocomplete';\nimport { KeyCodes } from '../core/core';\n\nconst noop = () => { };\n\nexport class Chip {\n  public text: string;\n  public value: string;\n\n  constructor(source: any, textKey: string, valueKey: string) {\n    if (typeof source === 'string') {\n      this.text = this.value = source;\n    }\n    if (typeof source === 'object') {\n      this.text = source[textKey];\n      this.value = valueKey ? source[valueKey] : source;\n    }\n  }\n}\n\nlet nextId = 0;\nexport const MD2_CHIPS_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => Md2Chips),\n  multi: true\n};\n\n@Component({\n  selector: 'md2-chips',\n  templateUrl: 'chips.html',\n  styleUrls: ['chips.css'],\n  providers: [MD2_CHIPS_CONTROL_VALUE_ACCESSOR],\n\n  host: {\n    'role': 'chips',\n    '[id]': 'id',\n    '[tabindex]': 'readonly ? -1 : tabindex',\n    '[class.chip-input-focus]': 'inputFocused || selectedChip >= 0',\n  },\n  encapsulation: ViewEncapsulation.None\n})\n\nexport class Md2Chips implements ControlValueAccessor, AfterContentInit {\n  @Input() tabindex: number = 0;\n  @Input() addOnComma: boolean = true;\n  @Input() addOnEnter: boolean = true;\n  @Input() addOnPaste: boolean = true;\n  @Input() addOnSpace: boolean = false;\n  @Input() allowedPattern: RegExp = /.+/;\n  @Input() ngModel: string[];\n  @Input() pasteSplitPattern: string = ',';\n  @Input() placeholder: string = 'Add New';\n  @Input() autocompleteDataList: string[];\n  @Input() isAutoComplete: boolean = false;\n  @Input() isRemovable: boolean = true;\n  @Input() readonly: boolean = false;\n  @Input() minChips: number = 0;\n  @Input() maxChips: number = 10000;\n  @Input() id: string = 'md2-chips-' + (++nextId);\n  @Input('autocomplete-item-text') autocompleteItemText: string = 'text';\n  @Input('autocomplete-item-value') autocompleteItemValue: string = 'value';\n  @Input('item-text') textKey: string = 'text';\n  @Input('item-value') valueKey: string = 'value';\n\n  @Output() change: EventEmitter<any> = new EventEmitter<any>();\n  @ViewChild('chipInputForm') chipInputForm: NgForm;\n\n  private onTouchedCallback: () => void = noop;\n  private onChangeCallback: (_: any) => void = noop;\n  chipItemList: Array<Chip> = [];\n  public inputValue: string = '';\n  private _value: any = '';\n  public selectedChip: number = -1;\n  private splitRegExp: RegExp;\n  private templateHtmlString: any;\n  private item: any;\n  inputFocused: boolean = false;\n  private isEmptyAutoComplete: boolean = true;\n  private isObject: boolean;\n\n  constructor(private elementRef: ElementRef) { }\n\n  get element() {\n    const elements: any = { root: this.elementRef.nativeElement, mainDiv: null, template: null };\n    elements.mainDiv = elements.root.querySelector('.md2-chips-container');\n    elements.template = elements.mainDiv.querySelector('.md2-template');\n    return elements;\n  }\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) { this.setValue(value); }\n\n\n  /**\n   * set value\n   * @param value\n   */\n  set setValue(value: any) {\n    if (value !== this._value) {\n      this._value = value;\n      this.chipItemList = [];\n      if (value) {\n        if (value && value.length && typeof value[0] === 'object' && Array.isArray(value)) {\n          for (let i = 0; i < value.length; i++) {\n            this.chipItemList.push(new Chip(value[i], this.textKey, this.valueKey));\n          }\n          this.isObject = true;\n        } else if (value && value.length && typeof value[0] === 'string' && Array.isArray(value)) {\n          this.chipItemList = value;\n          this.isObject = false;\n        }\n      }\n    }\n    this.onChangeCallback(value);\n    this.change.emit(this.chipItemList);\n  }\n\n  changeAutocomplete(value: any) {\n    if (value) {\n      let objText = value.value;\n      this.addNewChip(objText);\n      this.item = null;\n    }\n  }\n\n  ngAfterContentInit() {\n    let elements = this.element;\n    this.splitRegExp = new RegExp(this.pasteSplitPattern);\n    if (elements.template) {\n      this.templateHtmlString = elements.template.innerHTML;\n    }\n  }\n\n  // check autocomplete input is empty or not\n  valueupdate(evt: Event) {\n    this.isEmptyAutoComplete = evt ? false : true;\n  }\n\n  /**\n   * input key listener\n   * @param event\n   */\n  inputChanged(event: KeyboardEvent): void {\n    let key = event.keyCode;\n    switch (key) {\n      // back space\n      case KeyCodes.BACKSPACE:\n        this.backspaceEvent();\n        break;\n      // delete\n      case KeyCodes.DELETE:\n        this.backspaceEvent();\n        break;\n      // left arrow\n      case KeyCodes.LEFT_ARROW:\n        if (this.isAutoComplete && this.isEmptyAutoComplete) {\n          this.leftArrowKeyEvents();\n        } else if (!this.isAutoComplete && !this.inputValue) {\n          this.leftArrowKeyEvents();\n        }\n        break;\n      // right arrow\n      case KeyCodes.RIGHT_ARROW:\n        if (this.isAutoComplete && this.isEmptyAutoComplete) {\n          this.rightArrowKeyEvents();\n        } else if (!this.isAutoComplete && !this.inputValue) {\n          this.rightArrowKeyEvents();\n        }\n        break;\n      // enter\n      case KeyCodes.ENTER:\n        if (this.addOnEnter) {\n          this.addNewChip(this.inputValue);\n          event.preventDefault();\n        }\n        break;\n      // comma\n      case KeyCodes.COMMA:\n        if (this.addOnComma) {\n          this.addNewChip(this.inputValue);\n          event.preventDefault();\n        }\n        break;\n      // space\n      case KeyCodes.SPACE:\n        if (this.addOnSpace) {\n          this.addNewChip(this.inputValue);\n          event.preventDefault();\n        }\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  @HostListener('focus')\n  _handleFocus() {\n    if (this.readonly) { return; }\n    if (!this.isAutoComplete) {\n      this.elementRef.nativeElement.querySelector('input.chip-input').focus();\n    }\n    this._resetSelected();\n  }\n  inputBlurred(event: Event): void {\n      this.inputFocused = false;     \n      this.addNewChip(this.inputValue);\n  }\n\n  inputFocus(event: Event): void {\n    if (this.readonly) { return; }\n    this.inputFocused = true;\n  }\n\n  inputPaste(event: any): void {\n    let clipboardData = event.clipboardData ||\n      (event.originalEvent && event.originalEvent.clipboardData);\n    let pastedString = clipboardData.getData('text/plain');\n    let chips = this.addRegExpString(pastedString);\n    let chipsToAdd = chips.filter((chip) => this._isValid(chip));\n    this.addNewChip(chipsToAdd);\n    setTimeout(() => this._resetInput());\n  }\n\n  leftArrowKeyEvents() {\n    event.preventDefault();\n    if (this.selectedChip) {\n      if (this.selectedChip < 0) {\n        this.selectedChip = this.chipItemList.length - 1;\n      } else {\n        this.selectedChip = this.selectedChip - 1;\n      }\n    }\n  }\n  rightArrowKeyEvents() {\n    event.preventDefault();\n    if (this.selectedChip != -1) {\n      if (this.selectedChip >= this.chipItemList.length) {\n        this.selectedChip = 0;\n      } else {\n        this.selectedChip = this.selectedChip + 1;\n      }\n    }\n  }\n\n  private addRegExpString(chipInputString: string): string[] {\n    chipInputString = chipInputString.trim();\n    let chips = chipInputString.split(this.splitRegExp);\n    return chips.filter((chip) => !!chip);\n  }\n\n  private _isValid(chipString: any): boolean {\n    if (chipString) {\n      let isExist: any;\n      if (this.isObject) {\n        isExist = this.chipItemList.filter((chip) => chip.text === chipString.text);\n        return isExist.length ? false : true;\n      } else if (this.chipItemList.indexOf(chipString) === -1) {\n        return this.allowedPattern.test(chipString);\n      }\n    }\n  }\n  /**\n  * add new chip\n  * @param chips\n  */\n  private addNewChip(chips: any): void {\n    let validInput = this._isValid(chips);\n    if (validInput) {\n      if (this.maxChips) {\n        if (this.chipItemList.length < this.maxChips) {\n          if (this.isObject && this.chipItemList.length > 0) {\n            let a: any = {};\n            a[this.textKey] = chips[this.autocompleteItemText];\n            a[this.valueKey] = chips[this.autocompleteItemValue];\n            this.chipItemList.push(new Chip(a, this.textKey, this.valueKey));\n          } else {\n            this.chipItemList.push(chips);\n          }\n        }\n      } else {\n        this.chipItemList.push(new Chip(chips, this.textKey, this.valueKey));\n        this.item = null;\n      }\n    }\n    this._resetSelected();\n    this._resetInput();\n    this.updateValue();\n  }\n\n  /**\n * remove selected chip\n * @param chipIndexToRemove index of selected chip\n */\n  private removeSelectedChip(chipIndexToRemove: number): void {\n    this.chipItemList.splice(chipIndexToRemove, 1);\n    this._resetSelected();\n    this.updateValue();\n  }\n\n  private backspaceEvent(): void {\n    if (!this.inputValue.length && this.chipItemList.length &&\n      this.isRemovable && this.isEmptyAutoComplete) {\n      if (this.selectedChip != -1) {\n        this.removeSelectedChip(this.selectedChip);\n        this.selectedChip = this.chipItemList.length - 1;\n      } else {\n        this.selectedChip = this.chipItemList.length - 1;\n      }\n    }\n  }\n\n  private _resetSelected(): void {\n    this.selectedChip = -1;\n  }\n\n  private _resetInput(): void {\n    if (this.isAutoComplete) {\n      this.chipInputForm.controls['autocomplete'].setValue('');\n    } else {\n      this.chipInputForm.controls['chipInput'].setValue('');\n    }\n  }\n  /**\n   * update value\n   */\n  private updateValue() {\n    this._value = new Array<any>();\n    for (let i = 0; i < this.chipItemList.length; i++) {\n      //if (this.isObject) {\n      //  this._value.push(this.chipItemList[i].value);\n      //} else {\n      //  this._value.push(this.chipItemList[i]);\n      //}\n        this._value.push(this.chipItemList[i]);\n    }\n    this.onChangeCallback(this._value);\n    this.change.emit(this._value);\n  }\n\n  writeValue(value: any): void {\n    if (value !== this._value) {\n      this._value = value;\n      this.chipItemList = [];\n      if (value) {\n        if (value && value.length && typeof value[0] === 'object' && Array.isArray(value)) {\n          for (let i = 0; i < value.length; i++) {\n            this.chipItemList.push(new Chip(value[i], this.textKey, this.valueKey));\n          }\n          this.isObject = true;\n        } else if (value && value.length && typeof value[0] === 'string' && Array.isArray(value)) {\n          this.chipItemList = value;\n          this.isObject = false;\n        }\n      }\n    }\n  }\n  registerOnChange(fn: any) { this.onChangeCallback = fn; }\n  registerOnTouched(fn: any) { this.onTouchedCallback = fn; }\n}\n\nexport const MD2_CHIPS_DIRECTIVES: any[] = [Md2Chips];\n\n@NgModule({\n  imports: [CommonModule, FormsModule, Md2AutocompleteModule],\n  declarations: MD2_CHIPS_DIRECTIVES,\n  exports: MD2_CHIPS_DIRECTIVES\n})\nexport class Md2ChipsModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: Md2ChipsModule,\n      providers: []\n    };\n  }\n}\n"]}